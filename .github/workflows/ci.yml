name: Continuous integration checks

on:
  # Run on PRs and pushes, only on significant changes.
  push:
    branches:
      - develop
      - main
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - develop
    paths-ignore:
      - '**.md'

jobs:
  phpcs:
    name: PHPCS check on PHP ${{ matrix.php }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php: ['7.3', '7.4']

    steps:
      # Checkout repository
      - name: Checkout
        uses: actions/checkout@v2

      # Setup PHP versions, run checks
      - name: PHP setup
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          coverage: none
          tools: cs2pr

      # Install dependencies and handle caching in one go.
      # @link https://github.com/marketplace/actions/install-composer-dependencies
      - name: Install Composer dependencies
        uses: ramsey/composer-install@v1
        with:
          dependency-versions: highest

      - name: Check coding standards using PHPCS
        continue-on-error: true
        run: composer standards:check -- --runtime-set testVersion ${{ matrix.php }}- --report-full --report-checkstyle=./phpcs-report.xml

      - name: Show PHPCS results in PR
        run: cs2pr ./phpcs-report.xml

  phpstan:
    name: PHPStan check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php: ['7.4']

    steps:
     # Checkout repository
     - name: Checkout
       uses: actions/checkout@v2

     # Setup PHP versions, run checks
     - name: PHP setup
       uses: shivammathur/setup-php@v2
       with:
         php-version: ${{ matrix.php }}
         coverage: none

     # Install dependencies and handle caching in one go.
     # @link https://github.com/marketplace/actions/install-composer-dependencies
     - name: Install Composer dependencies
       uses: ramsey/composer-install@v1
       with:
         dependency-versions: highest

     - name: Check code consistency using PHPStan
       run: composer analyze
